// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/comcast/cf-zdd-plugin/commands"
)

type FakeCommonCmd struct {
	IsApplicationDeployedStub        func(string) (string, bool)
	isApplicationDeployedMutex       sync.RWMutex
	isApplicationDeployedArgsForCall []struct {
		arg1 string
	}
	isApplicationDeployedReturns struct {
		result1 string
		result2 bool
	}
	isApplicationDeployedReturnsOnCall map[int]struct {
		result1 string
		result2 bool
	}
	PushApplicationStub        func(string, string, string, ...string) error
	pushApplicationMutex       sync.RWMutex
	pushApplicationArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 []string
	}
	pushApplicationReturns struct {
		result1 error
	}
	pushApplicationReturnsOnCall map[int]struct {
		result1 error
	}
	RenameApplicationStub        func(string, string) error
	renameApplicationMutex       sync.RWMutex
	renameApplicationArgsForCall []struct {
		arg1 string
		arg2 string
	}
	renameApplicationReturns struct {
		result1 error
	}
	renameApplicationReturnsOnCall map[int]struct {
		result1 error
	}
	RemapRoutesStub        func(string, string) error
	remapRoutesMutex       sync.RWMutex
	remapRoutesArgsForCall []struct {
		arg1 string
		arg2 string
	}
	remapRoutesReturns struct {
		result1 error
	}
	remapRoutesReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveApplicationStub        func(string) error
	removeApplicationMutex       sync.RWMutex
	removeApplicationArgsForCall []struct {
		arg1 string
	}
	removeApplicationReturns struct {
		result1 error
	}
	removeApplicationReturnsOnCall map[int]struct {
		result1 error
	}
	GetDefaultDomainStub        func() string
	getDefaultDomainMutex       sync.RWMutex
	getDefaultDomainArgsForCall []struct{}
	getDefaultDomainReturns     struct {
		result1 string
	}
	getDefaultDomainReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCommonCmd) IsApplicationDeployed(arg1 string) (string, bool) {
	fake.isApplicationDeployedMutex.Lock()
	ret, specificReturn := fake.isApplicationDeployedReturnsOnCall[len(fake.isApplicationDeployedArgsForCall)]
	fake.isApplicationDeployedArgsForCall = append(fake.isApplicationDeployedArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("IsApplicationDeployed", []interface{}{arg1})
	fake.isApplicationDeployedMutex.Unlock()
	if fake.IsApplicationDeployedStub != nil {
		return fake.IsApplicationDeployedStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.isApplicationDeployedReturns.result1, fake.isApplicationDeployedReturns.result2
}

func (fake *FakeCommonCmd) IsApplicationDeployedCallCount() int {
	fake.isApplicationDeployedMutex.RLock()
	defer fake.isApplicationDeployedMutex.RUnlock()
	return len(fake.isApplicationDeployedArgsForCall)
}

func (fake *FakeCommonCmd) IsApplicationDeployedArgsForCall(i int) string {
	fake.isApplicationDeployedMutex.RLock()
	defer fake.isApplicationDeployedMutex.RUnlock()
	return fake.isApplicationDeployedArgsForCall[i].arg1
}

func (fake *FakeCommonCmd) IsApplicationDeployedReturns(result1 string, result2 bool) {
	fake.IsApplicationDeployedStub = nil
	fake.isApplicationDeployedReturns = struct {
		result1 string
		result2 bool
	}{result1, result2}
}

func (fake *FakeCommonCmd) IsApplicationDeployedReturnsOnCall(i int, result1 string, result2 bool) {
	fake.IsApplicationDeployedStub = nil
	if fake.isApplicationDeployedReturnsOnCall == nil {
		fake.isApplicationDeployedReturnsOnCall = make(map[int]struct {
			result1 string
			result2 bool
		})
	}
	fake.isApplicationDeployedReturnsOnCall[i] = struct {
		result1 string
		result2 bool
	}{result1, result2}
}

func (fake *FakeCommonCmd) PushApplication(arg1 string, arg2 string, arg3 string, arg4 ...string) error {
	fake.pushApplicationMutex.Lock()
	ret, specificReturn := fake.pushApplicationReturnsOnCall[len(fake.pushApplicationArgsForCall)]
	fake.pushApplicationArgsForCall = append(fake.pushApplicationArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 []string
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("PushApplication", []interface{}{arg1, arg2, arg3, arg4})
	fake.pushApplicationMutex.Unlock()
	if fake.PushApplicationStub != nil {
		return fake.PushApplicationStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.pushApplicationReturns.result1
}

func (fake *FakeCommonCmd) PushApplicationCallCount() int {
	fake.pushApplicationMutex.RLock()
	defer fake.pushApplicationMutex.RUnlock()
	return len(fake.pushApplicationArgsForCall)
}

func (fake *FakeCommonCmd) PushApplicationArgsForCall(i int) (string, string, string, []string) {
	fake.pushApplicationMutex.RLock()
	defer fake.pushApplicationMutex.RUnlock()
	return fake.pushApplicationArgsForCall[i].arg1, fake.pushApplicationArgsForCall[i].arg2, fake.pushApplicationArgsForCall[i].arg3, fake.pushApplicationArgsForCall[i].arg4
}

func (fake *FakeCommonCmd) PushApplicationReturns(result1 error) {
	fake.PushApplicationStub = nil
	fake.pushApplicationReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCommonCmd) PushApplicationReturnsOnCall(i int, result1 error) {
	fake.PushApplicationStub = nil
	if fake.pushApplicationReturnsOnCall == nil {
		fake.pushApplicationReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.pushApplicationReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCommonCmd) RenameApplication(arg1 string, arg2 string) error {
	fake.renameApplicationMutex.Lock()
	ret, specificReturn := fake.renameApplicationReturnsOnCall[len(fake.renameApplicationArgsForCall)]
	fake.renameApplicationArgsForCall = append(fake.renameApplicationArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("RenameApplication", []interface{}{arg1, arg2})
	fake.renameApplicationMutex.Unlock()
	if fake.RenameApplicationStub != nil {
		return fake.RenameApplicationStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.renameApplicationReturns.result1
}

func (fake *FakeCommonCmd) RenameApplicationCallCount() int {
	fake.renameApplicationMutex.RLock()
	defer fake.renameApplicationMutex.RUnlock()
	return len(fake.renameApplicationArgsForCall)
}

func (fake *FakeCommonCmd) RenameApplicationArgsForCall(i int) (string, string) {
	fake.renameApplicationMutex.RLock()
	defer fake.renameApplicationMutex.RUnlock()
	return fake.renameApplicationArgsForCall[i].arg1, fake.renameApplicationArgsForCall[i].arg2
}

func (fake *FakeCommonCmd) RenameApplicationReturns(result1 error) {
	fake.RenameApplicationStub = nil
	fake.renameApplicationReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCommonCmd) RenameApplicationReturnsOnCall(i int, result1 error) {
	fake.RenameApplicationStub = nil
	if fake.renameApplicationReturnsOnCall == nil {
		fake.renameApplicationReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.renameApplicationReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCommonCmd) RemapRoutes(arg1 string, arg2 string) error {
	fake.remapRoutesMutex.Lock()
	ret, specificReturn := fake.remapRoutesReturnsOnCall[len(fake.remapRoutesArgsForCall)]
	fake.remapRoutesArgsForCall = append(fake.remapRoutesArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("RemapRoutes", []interface{}{arg1, arg2})
	fake.remapRoutesMutex.Unlock()
	if fake.RemapRoutesStub != nil {
		return fake.RemapRoutesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.remapRoutesReturns.result1
}

func (fake *FakeCommonCmd) RemapRoutesCallCount() int {
	fake.remapRoutesMutex.RLock()
	defer fake.remapRoutesMutex.RUnlock()
	return len(fake.remapRoutesArgsForCall)
}

func (fake *FakeCommonCmd) RemapRoutesArgsForCall(i int) (string, string) {
	fake.remapRoutesMutex.RLock()
	defer fake.remapRoutesMutex.RUnlock()
	return fake.remapRoutesArgsForCall[i].arg1, fake.remapRoutesArgsForCall[i].arg2
}

func (fake *FakeCommonCmd) RemapRoutesReturns(result1 error) {
	fake.RemapRoutesStub = nil
	fake.remapRoutesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCommonCmd) RemapRoutesReturnsOnCall(i int, result1 error) {
	fake.RemapRoutesStub = nil
	if fake.remapRoutesReturnsOnCall == nil {
		fake.remapRoutesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.remapRoutesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCommonCmd) RemoveApplication(arg1 string) error {
	fake.removeApplicationMutex.Lock()
	ret, specificReturn := fake.removeApplicationReturnsOnCall[len(fake.removeApplicationArgsForCall)]
	fake.removeApplicationArgsForCall = append(fake.removeApplicationArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("RemoveApplication", []interface{}{arg1})
	fake.removeApplicationMutex.Unlock()
	if fake.RemoveApplicationStub != nil {
		return fake.RemoveApplicationStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.removeApplicationReturns.result1
}

func (fake *FakeCommonCmd) RemoveApplicationCallCount() int {
	fake.removeApplicationMutex.RLock()
	defer fake.removeApplicationMutex.RUnlock()
	return len(fake.removeApplicationArgsForCall)
}

func (fake *FakeCommonCmd) RemoveApplicationArgsForCall(i int) string {
	fake.removeApplicationMutex.RLock()
	defer fake.removeApplicationMutex.RUnlock()
	return fake.removeApplicationArgsForCall[i].arg1
}

func (fake *FakeCommonCmd) RemoveApplicationReturns(result1 error) {
	fake.RemoveApplicationStub = nil
	fake.removeApplicationReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCommonCmd) RemoveApplicationReturnsOnCall(i int, result1 error) {
	fake.RemoveApplicationStub = nil
	if fake.removeApplicationReturnsOnCall == nil {
		fake.removeApplicationReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeApplicationReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCommonCmd) GetDefaultDomain() string {
	fake.getDefaultDomainMutex.Lock()
	ret, specificReturn := fake.getDefaultDomainReturnsOnCall[len(fake.getDefaultDomainArgsForCall)]
	fake.getDefaultDomainArgsForCall = append(fake.getDefaultDomainArgsForCall, struct{}{})
	fake.recordInvocation("GetDefaultDomain", []interface{}{})
	fake.getDefaultDomainMutex.Unlock()
	if fake.GetDefaultDomainStub != nil {
		return fake.GetDefaultDomainStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getDefaultDomainReturns.result1
}

func (fake *FakeCommonCmd) GetDefaultDomainCallCount() int {
	fake.getDefaultDomainMutex.RLock()
	defer fake.getDefaultDomainMutex.RUnlock()
	return len(fake.getDefaultDomainArgsForCall)
}

func (fake *FakeCommonCmd) GetDefaultDomainReturns(result1 string) {
	fake.GetDefaultDomainStub = nil
	fake.getDefaultDomainReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeCommonCmd) GetDefaultDomainReturnsOnCall(i int, result1 string) {
	fake.GetDefaultDomainStub = nil
	if fake.getDefaultDomainReturnsOnCall == nil {
		fake.getDefaultDomainReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getDefaultDomainReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeCommonCmd) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.isApplicationDeployedMutex.RLock()
	defer fake.isApplicationDeployedMutex.RUnlock()
	fake.pushApplicationMutex.RLock()
	defer fake.pushApplicationMutex.RUnlock()
	fake.renameApplicationMutex.RLock()
	defer fake.renameApplicationMutex.RUnlock()
	fake.remapRoutesMutex.RLock()
	defer fake.remapRoutesMutex.RUnlock()
	fake.removeApplicationMutex.RLock()
	defer fake.removeApplicationMutex.RUnlock()
	fake.getDefaultDomainMutex.RLock()
	defer fake.getDefaultDomainMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCommonCmd) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.CommonCmd = new(FakeCommonCmd)
